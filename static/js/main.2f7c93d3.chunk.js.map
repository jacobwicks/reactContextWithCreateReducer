{"version":3,"sources":["services/PagesContext/actions/index.ts","services/PagesContext/actions/AddPage/index.ts","services/PagesContext/actions/DeletePage/index.ts","services/PagesContext/actions/SetCurrentPage/index.ts","services/GetRandomInt/index.ts","services/GetQuestions/index.ts","services/GetPage/index.ts","services/PagesContext/index.tsx","components/AddPage/index.tsx","components/Sidebar/index.tsx","components/DeletePage/index.tsx","components/Page/index.tsx","App.tsx","serviceWorker.ts","index.tsx"],"names":["PagesActionTypes","action","createAction","addPage","reducer","state","payload","pages","push","page","deletePage","filter","p","number","current","undefined","setCurrentPage","getRandomInt","min","max","Math","ceil","floor","random","questions","getQuestions","selected","i","length","getPage","numberOfQuestions","initialState","dispatch","createReducer","builder","addCase","addPageReducer","deletePageReducer","setCurrentPageReducer","PagesContext","createContext","PagesProvider","children","testState","testDispatch","useReducer","value","Provider","AddPage","useContext","className","onClick","pageNumber","newPage","handleClick","Sidebar","map","index","key","style","padding","backgroundColor","DeletePage","Page","currentPage","find","question","App","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"+KAMYA,E,uEAAAA,K,kBAAAA,E,wBAAAA,E,iCAAAA,M,KCGZ,IAAMC,EAASC,YACbF,EAAiBG,SAGNC,EAAU,SACrBC,EADqB,GAGjB,IADFC,EACC,EADDA,QAEFD,EAAME,MAAMC,KAAKF,EAAQG,OAGZR,ICZTA,EAASC,YAAaF,EAAiBU,YAEhCN,EAAU,SAACC,GACtBA,EAAME,MAAQF,EAAME,MAAMI,QAAO,SAACC,GAAD,OAAOA,EAAEC,SAAWR,EAAMS,WAC3DT,EAAMS,aAAUC,GAGHd,ICNTA,EAASC,YACbF,EAAiBgB,gBAGNZ,EAAU,SACrBC,EADqB,GAGjB,IADFC,EACC,EADDA,QAEFD,EAAMS,QAAUR,GAGHL,ICbAgB,EAPM,WAAyB,IAAxBC,EAAuB,uDAAjB,EAAGC,EAAc,uDAAR,IAInC,OAHAD,EAAME,KAAKC,KAAKH,IAChBC,EAAMC,KAAKE,MAAMH,IACXD,IAAQC,EAAMD,EAAM,GACnBE,KAAKE,MAAMF,KAAKG,UAAYJ,EAAMD,EAAM,IAAMA,GCFjDM,EAAY,CAChB,oDACA,oDACA,+DACA,sDACA,yDACA,kCACA,wCACA,kDACA,8BACA,0DACA,wEACA,mFACA,qGACA,oGACA,2EACA,4EACA,mEACA,wHACA,sCACA,2EACA,mHACA,wFACA,0FACA,4JACA,4GACA,+CACA,0DACA,4CACA,mDACA,gDACA,oCACA,+DACA,0DACA,gGACA,yDACA,2DACA,qFACA,wDACA,kEACA,gDACA,qEACA,6EACA,4BACA,qCACA,qFACA,8EACA,uDACA,2DACA,6BACA,wEACA,sDACA,0FACA,2FAYaC,EARM,WAEnB,IAFoC,IAAhBZ,EAAe,uDAAN,EACzBa,EAAW,GACNC,EAAI,EAAGA,EAAId,EAAQc,IAC1BD,EAASlB,KAAKgB,EAAUP,EAAa,EAAGO,EAAUI,OAAS,KAE7D,OAAOF,GCtDMG,EAPC,SAAChB,EAAgBiB,GAAjB,MAAiD,CAC/DjB,SACAW,UAAWC,EACTK,GAAwCb,EAAa,EAAG,OCsB/Cc,EAAe,CAC1BjB,QAAS,EACTP,MAAO,CANKsB,EAAQ,GACRA,EAAQ,GACRA,EAAQ,IAKpBG,SAAU,SAAC/B,MAGAG,EAKT6B,YAEFF,GAEA,SAACG,GAAD,OACEA,EAEGC,QAIChC,EAKAiC,GAIDD,QAAQzB,EAAY2B,GACpBF,QAAQnB,EAAgBsB,MAGzBC,EAAeC,wBAAcT,GAiB7BU,EAAgB,SAAC,GAAuD,IAArDC,EAAoD,EAApDA,SAAUC,EAA0C,EAA1CA,UAAWC,EAA+B,EAA/BA,aAA+B,EAIjDC,qBACxBzC,EAEAuC,GAAwBZ,GAPiD,mBAIpE1B,EAJoE,KAI7D2B,EAJ6D,KAWrEc,EAAiB,2BAClBzC,GADkB,IAErB2B,SAAUY,GAA8BZ,IAG1C,OACE,kBAACO,EAAaQ,SAAd,CAAuBD,MAAOA,GAAQJ,IC5E3BM,EAhBC,WAAO,IAAD,EACQC,qBAAWV,GAA/BP,EADY,EACZA,SAAUzB,EADE,EACFA,MAQlB,OACE,4BAAQ2C,UAAU,MAAMC,QAAS,kBAPf,WAClB,IAAMC,EAAa7C,EAAMqB,OAASrB,EAAMA,EAAMqB,OAAS,GAAGf,OAAS,EAAI,EACjEwC,EAAUxB,EAAQuB,GACxBpB,EAAS7B,EAAQ,CAAEM,KAAM4C,KAIcC,KACrC,uBAAGJ,UAAU,eADf,cCkBWK,EA5BC,WAAO,IAAD,EACiBN,qBAAWV,GAAxCP,EADY,EACZA,SAAUlB,EADE,EACFA,QAASP,EADP,EACOA,MAC3B,OACE,yBAAK2C,UAAU,WACb,kBAAC,EAAD,MACA,6BACC3C,GACCA,EAAMiD,KAAI,SAAC/C,EAAMgD,GAAP,OACR,yBAAKC,IAAKD,EAAOE,MAAO,CAAEC,QAAS,KACjC,4BACEV,UAAU,MACVS,MACE7C,IAAYL,EAAKI,OACb,CAAEgD,gBAAiB,iBACnB9C,EAENoC,QAAS,kBAAMnB,EAAShB,EAAeP,EAAKI,WAP9C,QASQJ,EAAKI,OATb,IASqB,6BAClBJ,EAAKe,UAAUI,OAVlB,YAW6B,IAA1BnB,EAAKe,UAAUI,OAAe,IAAM,UCTpCkC,EAZI,WAAO,IAChB9B,EAAaiB,qBAAWV,GAAxBP,SAIR,OACE,4BAAQkB,UAAU,MAAMC,QAAS,kBAHTnB,EAAStB,OAI/B,uBAAGwC,UAAU,gBADf,iBCyBWa,EA/BF,WAAO,IAAD,EACUd,qBAAWV,GAA9BzB,EADS,EACTA,QAEFkD,EAHW,EACAzD,MAES0D,MAAK,SAACxD,GAAD,OAAUA,EAAKI,SAAWC,KAEzD,IAAKkD,EACH,OACE,yBAAKd,UAAU,QACb,iDARW,IAYT1B,EAAcwC,EAAdxC,UAER,OACE,yBAAK0B,UAAU,QACb,4CAAkBc,EAAYnD,QAC9B,kBAAC,EAAD,MACA,6BACA,6BACCW,EAAUgC,KAAI,SAACU,EAAUT,GAAX,OACb,yBAAKC,IAAKD,GACR,6BACGA,EAAQ,EADX,KACgBS,SCRXC,MAdf,WACE,OACE,yBAAKjB,UAAU,OACb,kBAAC,EAAD,KACE,4BAAQA,UAAU,cAAlB,kDAGA,kBAAC,EAAD,MACA,kBAAC,EAAD,SCDYkB,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDiIpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,a","file":"static/js/main.2f7c93d3.chunk.js","sourcesContent":["import { addPage } from \"./AddPage\";\r\nimport { deletePage } from \"./DeletePage\";\r\nimport { Page } from \"..\";\r\nimport { setCurrentPage } from \"./SetCurrentPage\";\r\n\r\n//enum containing the action types\r\nexport enum PagesActionTypes {\r\n  addPage = \"addPage\",\r\n  deletePage = \"deletePage\",\r\n  setCurrentPage = \"setCurrentPage\",\r\n}\r\n\r\n//declare payload interfaces\r\nexport interface hasPage {\r\n  page: Page;\r\n}\r\n\r\n//union type for all possible actions\r\nexport type PagesAction = addPage | deletePage | setCurrentPage;\r\n","import { PagesState } from \"../../\";\r\nimport { hasPage, PagesActionTypes } from \"..\";\r\nimport { createAction } from \"@reduxjs/toolkit\";\r\n\r\nexport type addPage = {\r\n  type: PagesActionTypes.addPage;\r\n  payload: hasPage;\r\n};\r\n\r\nconst action = createAction<hasPage, PagesActionTypes.addPage>(\r\n  PagesActionTypes.addPage\r\n);\r\n\r\nexport const reducer = (\r\n  state: PagesState,\r\n  { payload }: { payload: hasPage }\r\n) => {\r\n  state.pages.push(payload.page);\r\n};\r\n\r\nexport default action;\r\n","import { PagesState } from \"../../\";\r\nimport { PagesActionTypes } from \"..\";\r\nimport { createAction } from \"@reduxjs/toolkit\";\r\n\r\nexport type deletePage = {\r\n  type: PagesActionTypes.deletePage;\r\n};\r\n\r\nconst action = createAction(PagesActionTypes.deletePage);\r\n\r\nexport const reducer = (state: PagesState) => {\r\n  state.pages = state.pages.filter((p) => p.number !== state.current);\r\n  state.current = undefined;\r\n};\r\n\r\nexport default action;\r\n","import { PagesState } from \"../../\";\r\nimport { PagesActionTypes } from \"..\";\r\nimport { createAction } from \"@reduxjs/toolkit\";\r\n\r\nexport type setCurrentPage = {\r\n  type: PagesActionTypes.setCurrentPage;\r\n  payload: number;\r\n};\r\n\r\nconst action = createAction<number, PagesActionTypes.setCurrentPage>(\r\n  PagesActionTypes.setCurrentPage\r\n);\r\n\r\nexport const reducer = (\r\n  state: PagesState,\r\n  { payload }: { payload: number }\r\n) => {\r\n  state.current = payload;\r\n};\r\n\r\nexport default action;\r\n","const getRandomInt = (min = 1, max = 100) => {\r\n  min = Math.ceil(min);\r\n  max = Math.floor(max);\r\n  max < min && (max = min + 1);\r\n  return Math.floor(Math.random() * (max - min + 1)) + min;\r\n};\r\n\r\nexport default getRandomInt;\r\n","import getRandomInt from \"../GetRandomInt\";\r\n\r\nconst questions = [\r\n  \"What weird food combinations do you really enjoy?\",\r\n  \"What social stigma does society need to get over?\",\r\n  \"What food have you never eaten but would really like to try?\",\r\n  \"What’s something you really resent paying for?\",\r\n  \"What would a world populated by clones of you be like?\",\r\n  \"Do you think that aliens exist?\",\r\n  \"What are you currently worried about?\",\r\n  \"Where are some unusual places you’ve been?\",\r\n  \"Where do you get your news?\",\r\n  \"What are some red flags to watch out for in daily life?\",\r\n  \"What movie can you watch over and over without ever getting tired of?\",\r\n  \"When you are old, what do you think children will ask you to tell stories about?\",\r\n  \"If you could switch two movie characters, what switch would lead to the most inappropriate movies?\",\r\n  \"What inanimate object would be the most annoying if it played loud upbeat music while being used?\",\r\n  \"When did something start out badly for you but in the end, it was great?\",\r\n  \"How would your country change if everyone, regardless of age, could vote?\",\r\n  \"What animal would be cutest if scaled down to the size of a cat?\",\r\n  \"If your job gave you a surprise three day paid break to rest and recuperate, what would you do with those three days?\",\r\n  \"What’s wrong but sounds right?\",\r\n  \"What’s the most epic way you’ve seen someone quit or be fired?\",\r\n  \"If you couldn’t be convicted of any one type of crime, what criminal charge would you like to be immune to?\",\r\n  \"What’s something that will always be in fashion, no matter how much time passes?\",\r\n  \"What actors or actresses play the same character in almost every movie or show they do?\",\r\n  \"In the past people were buried with the items they would need in the afterlife, what would you want buried with you so you could use it in the afterlife?\",\r\n  \"What’s the best / worst practical joke that you’ve played on someone or that was played on you?\",\r\n  \"Who do you go out of your way to be nice to?\",\r\n  \"Where do you get most of the decorations for your home?\",\r\n  \"What food is delicious but a pain to eat?\",\r\n  \"Who was your craziest / most interesting teacher\",\r\n  \"What “old person” things do you do?\",\r\n  \"What was the last photo you took?\",\r\n  \"What is the most amazing slow motion video you’ve seen?\",\r\n  \"Which celebrity do you think is the most down to earth?\",\r\n  \"What would be the worst thing to hear as you are going under anesthesia before heart surgery?\",\r\n  \"What’s the spiciest thing you’ve ever eaten?\",\r\n  \"What’s the most expensive thing you’ve broken?\",\r\n  \"What obstacles would be included in the World’s most amazing obstacle course?\",\r\n  \"What makes you roll your eyes every time you hear it?\",\r\n  \"What do you think you are much better at than you actually are?\",\r\n  \"Should kidneys be able to be bought and sold?\",\r\n  \"What’s the most creative use of emojis you’ve ever seen?\",\r\n  \"When was the last time you got to tell someone “I told you so.”?\",\r\n  \"What riddles do you know?\",\r\n  \"What’s your cure for hiccups?\",\r\n  \"What invention doesn’t get a lot of love, but has greatly improved the world?\",\r\n  \"What’s the most interesting building you’ve ever seen or been in?\",\r\n  \"What mythical creature do you wish actually existed?\",\r\n  \"What are your most important rules when going on a date?\",\r\n  \"How do you judge a person?\",\r\n  \"If someone narrated your life, who would you want to be the narrator?\",\r\n  \"What was the most unsettling film you’ve seen?\",\r\n  \"What unethical experiment would have the biggest positive impact on society as a whole?\",\r\n  \"When was the last time you were snooping, and found something you wish you hadn’t?\",\r\n];\r\n\r\n//returns an array of questions\r\nconst getQuestions = (number = 1) => {\r\n  let selected = [];\r\n  for (let i = 0; i < number; i++) {\r\n    selected.push(questions[getRandomInt(1, questions.length - 1)]);\r\n  }\r\n  return selected;\r\n};\r\n\r\nexport default getQuestions;\r\n","import getRandomInt from \"../GetRandomInt\";\r\nimport getQuestions from \"../GetQuestions\";\r\n\r\nconst getPage = (number: number, numberOfQuestions?: number) => ({\r\n  number,\r\n  questions: getQuestions(\r\n    numberOfQuestions ? numberOfQuestions : getRandomInt(2, 10)\r\n  ),\r\n});\r\n\r\nexport default getPage;\r\n","import React, { createContext, useReducer } from \"react\";\r\nimport { createReducer, Reducer } from \"@reduxjs/toolkit\";\r\nimport { PagesAction } from \"./actions\";\r\nimport addPage, { reducer as addPageReducer } from \"./actions/AddPage\";\r\nimport deletePage, { reducer as deletePageReducer } from \"./actions/DeletePage\";\r\nimport setCurrentPage, {\r\n  reducer as setCurrentPageReducer,\r\n} from \"./actions/SetCurrentPage\";\r\nimport getPage from \"../GetPage\";\r\n\r\nexport type Page = {\r\n  //the number of the page\r\n  number: number;\r\n\r\n  //the questions that are on the page\r\n  questions: string[];\r\n};\r\n\r\nexport type PagesState = {\r\n  current?: number;\r\n  pages: Page[];\r\n  dispatch: React.Dispatch<PagesAction>;\r\n};\r\n\r\nconst page1 = getPage(1);\r\nconst page2 = getPage(2);\r\nconst page3 = getPage(3);\r\n\r\nexport const initialState = {\r\n  current: 1,\r\n  pages: [page1, page2, page3],\r\n  dispatch: (action: PagesAction) => undefined,\r\n} as PagesState;\r\n\r\nexport const reducer: Reducer<\r\n  //type the state object that the reducer accepts\r\n  PagesState,\r\n  //type the actions that the reducer processes\r\n  PagesAction\r\n> = createReducer(\r\n  //the initial state that the reducer starts with\r\n  initialState,\r\n  //the builder callback function\r\n  (builder) =>\r\n    builder\r\n      //addCase adds a key and a reducer function to the reducer\r\n      .addCase(\r\n        //addPage is the action creator function,\r\n        //but it can also be used as the key\r\n        //thanks to the redux toolkit createAction function\r\n        addPage,\r\n\r\n        //the reducer function accepts state and action\r\n        //and returns state\r\n        //these all take PagesState and a PagesAction\r\n        addPageReducer\r\n      )\r\n\r\n      //call addCase again to add all the other cases\r\n      .addCase(deletePage, deletePageReducer)\r\n      .addCase(setCurrentPage, setCurrentPageReducer)\r\n);\r\n\r\nconst PagesContext = createContext(initialState);\r\n\r\n//the Props that the PagesProvider will accept\r\ntype PagesProps = {\r\n  //You can put react components inside of the Provider component\r\n  children: React.ReactNode;\r\n\r\n  //We might want to pass a state into the Provider for testing purposes\r\n  testState?: PagesState;\r\n\r\n  //We might want to pass a dispatch function for testing purposes\r\n  //I give it args: any because\r\n  //I don't always want to have to accept valid actions\r\n  //when I'm testing\r\n  testDispatch?: (args: any) => void;\r\n};\r\n\r\nconst PagesProvider = ({ children, testState, testDispatch }: PagesProps) => {\r\n  //useReducer returns an array containing the state at [0]\r\n  //and the dispatch method at [1]\r\n  //use array destructuring to get state and dispatch\r\n  const [state, dispatch] = useReducer(\r\n    reducer,\r\n    //if testState provided, use it\r\n    testState ? testState : initialState\r\n  );\r\n\r\n  //add dispatch to value object\r\n  const value: PagesState = {\r\n    ...state,\r\n    dispatch: testDispatch ? testDispatch : dispatch,\r\n  };\r\n\r\n  return (\r\n    <PagesContext.Provider value={value}>{children}</PagesContext.Provider>\r\n  );\r\n};\r\n\r\nexport { PagesContext, PagesProvider };\r\n","import React, { useContext } from \"react\";\r\nimport { PagesContext } from \"../../services/PagesContext\";\r\nimport getPage from \"../../services/GetPage\";\r\nimport addPage from \"../../services/PagesContext/actions/AddPage\";\r\n\r\nconst AddPage = () => {\r\n  const { dispatch, pages } = useContext(PagesContext);\r\n\r\n  const handleClick = () => {\r\n    const pageNumber = pages.length ? pages[pages.length - 1].number + 1 : 1;\r\n    const newPage = getPage(pageNumber);\r\n    dispatch(addPage({ page: newPage }));\r\n  };\r\n\r\n  return (\r\n    <button className=\"btn\" onClick={() => handleClick()}>\r\n      <i className=\"fa fa-plus\"></i> Add Page\r\n    </button>\r\n  );\r\n};\r\n\r\nexport default AddPage;\r\n","import React, { useContext } from \"react\";\r\nimport { PagesContext } from \"../../services/PagesContext\";\r\nimport AddPage from \"../AddPage\";\r\nimport setCurrentPage from \"../../services/PagesContext/actions/SetCurrentPage\";\r\n\r\nconst Sidebar = () => {\r\n  const { dispatch, current, pages } = useContext(PagesContext);\r\n  return (\r\n    <div className=\"sidenav\">\r\n      <AddPage />\r\n      <br />\r\n      {pages &&\r\n        pages.map((page, index) => (\r\n          <div key={index} style={{ padding: 10 }}>\r\n            <button\r\n              className=\"btn\"\r\n              style={\r\n                current === page.number\r\n                  ? { backgroundColor: \"darkblue\" }\r\n                  : undefined\r\n              }\r\n              onClick={() => dispatch(setCurrentPage(page.number))}\r\n            >\r\n              Page {page.number} <br />\r\n              {page.questions.length} Question\r\n              {page.questions.length !== 1 ? \"s\" : \"\"}\r\n            </button>\r\n          </div>\r\n        ))}\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Sidebar;\r\n","import React, { useContext } from \"react\";\r\nimport { PagesContext } from \"../../services/PagesContext\";\r\nimport deletePage from \"../../services/PagesContext/actions/DeletePage\";\r\n\r\nconst DeletePage = () => {\r\n  const { dispatch } = useContext(PagesContext);\r\n\r\n  const handleClick = () => dispatch(deletePage());\r\n\r\n  return (\r\n    <button className=\"btn\" onClick={() => handleClick()}>\r\n      <i className=\"fa fa-trash\"></i> Delete Page\r\n    </button>\r\n  );\r\n};\r\n\r\nexport default DeletePage;\r\n","import React, { useContext } from \"react\";\r\nimport { PagesContext } from \"../../services/PagesContext\";\r\nimport DeletePage from \"../DeletePage\";\r\n\r\nconst Page = () => {\r\n  const { current, pages } = useContext(PagesContext);\r\n\r\n  const currentPage = pages.find((page) => page.number === current);\r\n\r\n  if (!currentPage)\r\n    return (\r\n      <div className=\"main\">\r\n        <h2>No page selected</h2>\r\n      </div>\r\n    );\r\n\r\n  const { questions } = currentPage;\r\n\r\n  return (\r\n    <div className=\"main\">\r\n      <h2>This is page {currentPage.number}</h2>\r\n      <DeletePage />\r\n      <br />\r\n      <br />\r\n      {questions.map((question, index) => (\r\n        <div key={index}>\r\n          <div>\r\n            {index + 1}. {question}\r\n          </div>\r\n        </div>\r\n      ))}\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Page;\r\n","import React from \"react\";\nimport Sidebar from \"./components/Sidebar\";\nimport { PagesProvider } from \"./services/PagesContext\";\nimport Page from \"./components/Page\";\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <PagesProvider>\n        <header className=\"App-header\">\n          React Context with Redux Toolkit createReducer\n        </header>\n        <Page />\n        <Sidebar />\n      </PagesProvider>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}